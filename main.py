import asyncio
import logging
import sqlite3
from datetime import date

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import aiohttp
import os

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

conn = sqlite3.connect('bot_data.db')
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    chat_id TEXT PRIMARY KEY,
    goal TEXT,
    goal_category TEXT DEFAULT '–æ–±—â–∞—è'
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS daily_tasks (
    chat_id TEXT,
    date TEXT,
    task TEXT,
    PRIMARY KEY(chat_id, date)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS progress_logs (
    chat_id TEXT,
    date TEXT,
    progress TEXT
)
""")

conn.commit()

def main_menu():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton("üíé VIP-–¥–æ—Å—Ç—É–ø"))
    kb.add(KeyboardButton("üéØ –ú–æ—è —Ü–µ–ª—å"))
    kb.add(KeyboardButton("üìã –ü–æ–º–æ—â—å"))
    return kb.as_markup(resize_keyboard=True)

def goal_menu():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton("üìù –í–≤–µ—Å—Ç–∏/–∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å"))
    kb.add(KeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–µ–π —Ü–µ–ª–∏"))
    kb.add(KeyboardButton("üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"))
    kb.add(KeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ü–µ–ª—å"))
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)

def vip_menu():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton("üíé –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç"))
    kb.add(KeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
    kb.add(KeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"))
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)

def help_menu():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton("üìñ –£—Å–ª–æ–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"))
    kb.add(KeyboardButton("üì¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)

def detect_goal_category(goal_text: str) -> str:
    goal_text = goal_text.lower()
    finance_words = ['–¥–µ–Ω—å–≥–∏', '—Ñ–∏–Ω–∞–Ω—Å', '–¥–æ—Ö–æ–¥', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '—ç–∫–æ–Ω–æ–º', '–∏–Ω–≤–µ—Å—Ç', '–±—é–¥–∂–µ—Ç']
    personal_words = ['—ç–º–æ—Ü–∏–æ–Ω', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '–Ω–∞–≤—ã–∫', '–ª–∏—á–Ω–æ—Å—Ç', '–º–µ–¥–∏—Ç–∞—Ü', '–∑–¥–æ—Ä–æ–≤—å–µ', '—Å–ø–æ—Ä—Ç']

    for w in finance_words:
        if w in goal_text:
            return '—Ñ–∏–Ω–∞–Ω—Å—ã'
    for w in personal_words:
        if w in goal_text:
            return '–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç'
    return '–¥—Ä—É–≥–æ–µ'

async def ask_ai(prompt: str) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    json_data = {
        "model": "anthropic/claude-3-haiku",
        "max_tokens": 500,
        "temperature": 0.7,
        "messages": [
            {"role": "system", "content": "–¢—ã –∫–æ—É—á, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π."},
            {"role": "user", "content": prompt}
        ]
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=json_data) as resp:
            if resp.status != 200:
                text = await resp.text()
                raise Exception(f"OpenRouter error {resp.status}: {text}")
            data = await resp.json()
            return data['choices'][0]['message']['content']

PROMPTS = {
    "—Ñ–∏–Ω–∞–Ω—Å—ã": "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ—É—á. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–ª—å: '{goal}'. –î–∞–π –ø—Ä–æ—Å—Ç–æ–π —à–∞–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ. –¢–æ–Ω ‚Äî –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π. –ü–æ–∂–µ–ª–∞–π –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞.",
    "–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ—É—á –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –ª–∏—á–Ω–æ—Å—Ç–∏. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–ª—å: '{goal}'. –î–∞–π –º–∞–ª–µ–Ω—å–∫–∏–π, –Ω–æ –º–æ—â–Ω—ã–π —à–∞–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –¢–æ–Ω ‚Äî –º—è–≥–∫–∏–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π. –ü–æ–∂–µ–ª–∞–π –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞.",
    "–¥—Ä—É–≥–æ–µ": "–¢—ã –∫–æ—É—á. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–ª—å: '{goal}'. –ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–µ–±–æ–ª—å—à–æ–π —à–∞–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –¢–æ–Ω ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π."
}

user_states = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø *–ë–æ–ª—å—à–µ —á–µ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫* ‚Äî –ò–ò-–∫–æ—É—á, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π.\n"
        "–í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å üëá",
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

@dp.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    user_states.pop(str(message.chat.id), None)
    await message.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

@dp.message(lambda message: message.text == "üéØ –ú–æ—è —Ü–µ–ª—å")
async def open_goal_menu(message: types.Message):
    await message.answer("üéØ –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–≤–æ–µ–π —Ü–µ–ª—å—é", reply_markup=goal_menu())

@dp.message(lambda message: message.text == "üìù –í–≤–µ—Å—Ç–∏/–∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å")
async def input_goal(message: types.Message):
    chat_id = str(message.chat.id)
    user_states[chat_id] = "await_goal"
    await message.answer("üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –Ω–æ–≤—É—é —Ü–µ–ª—å")

@dp.message(lambda message: message.text == "‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ü–µ–ª—å")
async def reset_goal(message: types.Message):
    chat_id = str(message.chat.id)
    cursor.execute("UPDATE users SET goal = NULL, goal_category = '–æ–±—â–∞—è' WHERE chat_id = ?", (chat_id,))
    conn.commit()
    await message.answer("üéØ –¶–µ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞.")

@dp.message(lambda message: message.text == "üîç –ê–Ω–∞–ª–∏–∑ –º–æ–µ–π —Ü–µ–ª–∏")
async def analyze_goal(message: types.Message):
    chat_id = str(message.chat.id)
    cursor.execute("SELECT goal FROM users WHERE chat_id = ?", (chat_id,))
    row = cursor.fetchone()
    if not row or not row[0]:
        await message.answer("‚ùå –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Ü–µ–ª–∏. –í–≤–µ–¥–∏ –µ—ë.")
        return
    goal = row[0]
    await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    prompt = f"–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏: {goal}\n–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é."
    try:
        answer = await ask_ai(prompt)
        await message.answer(answer)
    except Exception as e:
        logging.error(e)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.")

@dp.message(lambda message: message.text == "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: types.Message):
    chat_id = str(message.chat.id)
    cursor.execute("SELECT date, progress FROM progress_logs WHERE chat_id = ? ORDER BY date DESC LIMIT 5", (chat_id,))
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –ù–∞—á–Ω–∏ —Å–µ–≥–æ–¥–Ω—è!")
        return
    text = "üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:\n\n"
    for d, prog in rows:
        text += f"üìÖ {d} ‚Äî {prog}\n"
    await message.answer(text)

@dp.message()
async def handle_all_messages(message: types.Message):
    chat_id = str(message.chat.id)
    state = user_states.get(chat_id)

    if state == "await_goal":
        goal_text = message.text.strip()
        category = detect_goal_category(goal_text)
        cursor.execute("""
            INSERT INTO users (chat_id, goal, goal_category) VALUES (?, ?, ?)
            ON CONFLICT(chat_id) DO UPDATE SET goal=excluded.goal, goal_category=excluded.goal_category
        """, (chat_id, goal_text, category))
        conn.commit()
        user_states.pop(chat_id)
        await message.answer(f"üéØ –¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: *{goal_text}* (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category})", parse_mode="Markdown")
        return

    cursor.execute("SELECT date FROM daily_tasks WHERE chat_id = ? ORDER BY date DESC LIMIT 1", (chat_id,))
    last_task = cursor.fetchone()
    if last_task and user_states.get(chat_id) == "await_progress":
        progress_text = message.text.strip()
        progress_date = last_task[0]
        cursor.execute("INSERT INTO progress_logs (chat_id, date, progress) VALUES (?, ?, ?)", (chat_id, progress_date, progress_text))
        conn.commit()
        user_states.pop(chat_id)
        await message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥. üí™")
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

scheduler = AsyncIOScheduler()

async def send_morning_task():
    today = date.today().isoformat()
    cursor.execute("SELECT chat_id, goal, goal_category FROM users WHERE goal IS NOT NULL")
    users = cursor.fetchall()
    for chat_id, goal, category in users:
        prompt = PROMPTS.get(category, PROMPTS['–¥—Ä—É–≥–æ–µ']).format(goal=goal)
        try:
            task_text = await ask_ai(prompt)
        except Exception as e:
            logging.error(f"Error generating task for {chat_id}: {e}")
            task_text = "–°–¥–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è –Ω–µ–±–æ–ª—å—à–æ–π —à–∞–≥ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏."
        cursor.execute("""
            INSERT OR REPLACE INTO daily_tasks (chat_id, date, task) VALUES (?, ?, ?)
        """, (chat_id, today, task_text))
        conn.commit()
        try:
            await bot.send_message(chat_id,
                f"‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –º–æ–π –¥—Ä—É–≥!\n\n–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π —à–∞–≥ –∫ —Ü–µ–ª–∏:\n\n{task_text}")
        except Exception as e:
            logging.error(f"Error sending morning message to {chat_id}: {e}")

async def send_evening_check():
    today = date.today().isoformat()
    cursor.execute("SELECT chat_id FROM daily_tasks WHERE date = ?", (today,))
    users = cursor.fetchall()
    for (chat_id,) in users:
        try:
            await bot.send_message(chat_id,
                "üåô –ö–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å? –£–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π —è –ø—Ä–µ–¥–ª–æ–∂–∏–ª —É—Ç—Ä–æ–º? –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, –∫–∞–∫ –±—ã–ª–æ.")
            user_states[chat_id] = "await_progress"
        except Exception as e:
            logging.error(f"Error sending evening message to {chat_id}: {e}")

# ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π
scheduler = AsyncIOScheduler()
scheduler.add_job(send_morning_task, 'cron', hour=8, minute=0)
scheduler.add_job(send_evening_check, 'cron', hour=20, minute=0)

# üöÄ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())